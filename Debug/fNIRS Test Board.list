
fNIRS Test Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000464  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000464  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ca0  00000000  00000000  000104d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000253  00000000  00000000  00011177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000113d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00011458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c28  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b77  00000000  00000000  0002a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b474  00000000  00000000  0002ac4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000012c  00000000  00000000  000b60c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b61f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000444 	.word	0x08000444

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000444 	.word	0x08000444

08000204 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  //Configuring Blue Push-Button
  RCC_GPIO_CLK_ENABLE(GPIOC_CLK_EN);
 8000208:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <main+0xdc>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <main+0xdc>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOC_MODER_SEL(PIN_13, INPUT_SEL);
 8000214:	4b33      	ldr	r3, [pc, #204]	; (80002e4 <main+0xe0>)
 8000216:	4a33      	ldr	r2, [pc, #204]	; (80002e4 <main+0xe0>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	6013      	str	r3, [r2, #0]

  //Configuring onboard LED for testing
  RCC_GPIO_CLK_ENABLE(GPIOA_CLK_EN);
 800021c:	4b30      	ldr	r3, [pc, #192]	; (80002e0 <main+0xdc>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a2f      	ldr	r2, [pc, #188]	; (80002e0 <main+0xdc>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOA_MODER_SEL(PIN_5, OUTPUT_SEL);
 8000228:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <main+0xe4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <main+0xe4>)
 800022e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000232:	6013      	str	r3, [r2, #0]

  //Configuring GPIO pin to drive LED
  GPIOA_MODER_SEL(PIN_6, OUTPUT_SEL);
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <main+0xe4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a2b      	ldr	r2, [pc, #172]	; (80002e8 <main+0xe4>)
 800023a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800023e:	6013      	str	r3, [r2, #0]

  //Configuring GPIO pin to drive TIA
  GPIOA_MODER_SEL(PIN_7, OUTPUT_SEL);
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <main+0xe4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <main+0xe4>)
 8000246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800024a:	6013      	str	r3, [r2, #0]

  //Initializing One Pulse Mode Timer for 1ms
  LCD_DELAY_OPM_TIMER_INIT(10);
 800024c:	200a      	movs	r0, #10
 800024e:	f000 f84d 	bl	80002ec <LCD_DELAY_OPM_TIMER_INIT>
  while(!(TIM2_COMPLETE_EVENT)){}
 8000252:	bf00      	nop
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <main+0x50>

  while(1){

    //Polling for user button press
    while((GPIOC->IDR & (1U << 13))){}
 8000262:	bf00      	nop
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <main+0xe0>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d1f9      	bne.n	8000264 <main+0x60>

    //Onboard LED ON, cycle is in process.
    GPIOA_BSRR_SEL(PIN_5, BSRR_PIN_SET);
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <main+0xe4>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <main+0xe4>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6193      	str	r3, [r2, #24]

    /*
     *  Code responsible for turning on the LED and charging the TIA
     */

    GPIOA_BSRR_SEL(PIN_6, BSRR_PIN_SET);  //Turn on IR LED
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <main+0xe4>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <main+0xe4>)
 8000282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000286:	6193      	str	r3, [r2, #24]
    LCD_DELAY_OPM_TIMER_UPDATE(10); //Delay to ensure LED is properly turned on
 8000288:	200a      	movs	r0, #10
 800028a:	f000 f869 	bl	8000360 <LCD_DELAY_OPM_TIMER_UPDATE>
    GPIOA_BSRR_SEL(PIN_7, BSRR_PIN_SET);  //Start charging TIA
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xe4>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <main+0xe4>)
 8000294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000298:	6193      	str	r3, [r2, #24]
    LCD_DELAY_OPM_TIMER_UPDATE(10); //Delay to ensure TIA is charged to 1ms
 800029a:	200a      	movs	r0, #10
 800029c:	f000 f860 	bl	8000360 <LCD_DELAY_OPM_TIMER_UPDATE>
    GPIOA_BSRR_SEL(PIN_7, BSRR_PIN_CLEAR);  //Resets TIA
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <main+0xe4>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a10      	ldr	r2, [pc, #64]	; (80002e8 <main+0xe4>)
 80002a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002aa:	6193      	str	r3, [r2, #24]
    GPIOA_BSRR_SEL(PIN_6, BSRR_PIN_CLEAR);  //Turn off IR LED
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <main+0xe4>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <main+0xe4>)
 80002b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b6:	6193      	str	r3, [r2, #24]

    LCD_DELAY_OPM_TIMER_UPDATE(10000);
 80002b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80002bc:	f000 f850 	bl	8000360 <LCD_DELAY_OPM_TIMER_UPDATE>
    while(!(TIM2_COMPLETE_EVENT)){}
 80002c0:	bf00      	nop
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f8      	beq.n	80002c2 <main+0xbe>

    //Onboard LED OFF, cycle is finished.
    GPIOA_BSRR_SEL(PIN_5, BSRR_PIN_CLEAR);
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <main+0xe4>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <main+0xe4>)
 80002d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002da:	6193      	str	r3, [r2, #24]
    while((GPIOC->IDR & (1U << 13))){}
 80002dc:	e7c1      	b.n	8000262 <main+0x5e>
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020800 	.word	0x40020800
 80002e8:	40020000 	.word	0x40020000

080002ec <LCD_DELAY_OPM_TIMER_INIT>:
/*
 * ARR Preload Buffer ensures that any updates to the ARR register
 * will be applied AFTER the current timer cycle has finished.
 */

void LCD_DELAY_OPM_TIMER_INIT(UINT16 ARR_Div_Val){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	80fb      	strh	r3, [r7, #6]

    APB1_TIMERx_ENABLE(TIMER_2_EN);
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <LCD_DELAY_OPM_TIMER_INIT+0x70>)
 80002f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002fa:	4a18      	ldr	r2, [pc, #96]	; (800035c <LCD_DELAY_OPM_TIMER_INIT+0x70>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;
 8000302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000306:	f240 623f 	movw	r2, #1599	; 0x63f
 800030a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = ARR_Div_Val - 1;
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	1e5a      	subs	r2, r3, #1
 8000310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000314:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;
 8000316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2_OPM_EN;
 800031e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000328:	f043 0308 	orr.w	r3, r3, #8
 800032c:	6013      	str	r3, [r2, #0]
    TIM2_FLAG_CLEAR;
 800032e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000338:	f023 0301 	bic.w	r3, r3, #1
 800033c:	6113      	str	r3, [r2, #16]
    TIM2_START;
 800033e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6013      	str	r3, [r2, #0]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800

08000360 <LCD_DELAY_OPM_TIMER_UPDATE>:

void LCD_DELAY_OPM_TIMER_UPDATE(UINT16 ARR_Div_Val){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]

    TIM2_FLAG_CLEAR;
 800036a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000374:	f023 0301 	bic.w	r3, r3, #1
 8000378:	6113      	str	r3, [r2, #16]
    TIM2->CNT = 0;
 800037a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->ARR = ARR_Div_Val - 1;
 8000382:	88fb      	ldrh	r3, [r7, #6]
 8000384:	1e5a      	subs	r2, r3, #1
 8000386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2_START;
 800038c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 f811 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ff13 	bl	8000204 <main>

080003de <LoopForever>:

LoopForever:
  b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ec:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	; (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	; (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	; (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	; (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
